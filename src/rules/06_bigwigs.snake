# ====== Rules for creating bigwigs files from aligned reads ===================


# Create bigwigs using single bp read coordinates 
# Do not reverse strands since read #1 from QIA-seq libraries is the sense
# direction
rule create_bigwig:
    input:
        RESULTS + "/{sam_grp}/{sam_grp}.bed.gz"
    output:
        p_bg   = RESULTS + "/{sam_grp}/{sam_grp}_pos.bedgraph.gz",
        p_bg_N = RESULTS + "/{sam_grp}/{sam_grp}_pos_N.bedgraph.gz",
        p_bw   = RESULTS + "/{sam_grp}/{sam_grp}_pos.bw",
        n_bg   = RESULTS + "/{sam_grp}/{sam_grp}_neg.bedgraph.gz",
        n_bg_N = RESULTS + "/{sam_grp}/{sam_grp}_neg_N.bedgraph.gz",
        n_bw   = RESULTS + "/{sam_grp}/{sam_grp}_neg.bw"
    params:
        job_name = "{sam_grp}_bigwig",
        memory   = 8,
        chroms   = CHROMS
    log:
        out = RESULTS + "/logs/{sam_grp}_bigwig.out",
        err = RESULTS + "/logs/{sam_grp}_bigwig.err"
    benchmark:
        RESULTS + "/benchmarks/{sam_grp}_bigwig.tsv"
    message:
        "Creating bigwigs for {wildcards.sam_grp}"
    threads:
        6
    shell:
        """
        create_bigwig() {{
            local reads=$1
            local strand=$2
            local mtplyr=$3
            local bg=$4
            local bg_N=$5
            local bw=$6

            tmp_1=$(mktemp tmp.XXXXX)
            tmp_2=$(mktemp tmp.XXXXX)
            tmp_3=$(mktemp tmp.XXXXX)

            zcat -f $reads \
                > $tmp_1

            cat $tmp_1 \
                | sort -S1G --parallel={threads} -k1,1 -k2,2n \
                | bedtools genomecov -bg $strand -i - -g {params.chroms} \
                > $tmp_2

            {SRC}/norm_bed $tmp_1 $tmp_2 4 \
                | sort -S1G --parallel={threads} -k1,1 -k2,2n \
                | awk -v mtplyr=$mtplyr -v OFS="\t" '{{$4 = $4 * mtplyr; print}}' \
                > $tmp_3
            
            bedGraphToBigWig \
                $tmp_3 \
                {params.chroms} \
                $bw

            cat $tmp_2 \
                | pigz -p {threads} \
                > $bg

            cat $tmp_3 \
                | pigz -p {threads} \
                > $bg_N

            rm $tmp_1 $tmp_2 $tmp_3
        }}
        
        # Create bigwigs for each strand
        # Normalized by the number of reads in the starting bed file (RPM)
        create_bigwig \
            {input} \
            "-strand +" \
            1 \
            {output.p_bg} \
            {output.p_bg_N} \
            {output.p_bw}

        create_bigwig \
            {input} \
            "-strand -" \
            -1 \
            {output.n_bg} \
            {output.n_bg_N} \
            {output.n_bw}
        """


# Create IGV browser session
rule igv_browser:
    input:
        pos = expand(
            RESULTS + "/{sam_grp}/{sam_grp}_pos.bw",
            sam_grp = SAM_GRPS
        ),
        neg = expand(
            RESULTS + "/{sam_grp}/{sam_grp}_neg.bw",
            sam_grp = SAM_GRPS
        )
    output:
        urls = RESULTS + "/urls/" + PROJ + "_urls.tsv",
        xml  = RESULTS + "/urls/" + PROJ + "_igv.xml"
    params:
        job_name = PROJ + "_igv",
        memory   = 4,
        url      = URL,
        ssh      = SSH
    log:
        out = RESULTS + "/logs/" + PROJ + "_igv.out",
        err = RESULTS + "/logs/" + PROJ + "_igv.err"
    benchmark:
        RESULTS + "/benchmarks/" + PROJ + "_igv.tsv"
    message:
        "Creating " + PROJ + " IGV session"
    threads:
        1
    shell:
        """
        # Create files with URLs
        create_urls() {{
            local paths=$1
            local strand=$2
            local urls=$3

            if [ ! -s $urls ]
            then
                echo -e "URL\tSAMPLE\tGROUP\tSTRAND" \
                    > $urls
            fi

            for path in $paths
            do
                bw=$(basename $path)
                url={params.url}/$bw
                grp=$(echo $bw | grep -oP "(?<=-){GRP_REGEX}(?=_"$strand".bw$)")
                sam=$(echo $bw | grep -oP ".+(?=-$grp)")

                rsync --perms --chmod=ugo+r $path {params.ssh}

                echo -e "$url\t$sam\t$grp\t$strand" \
                    >> $urls
            done
        }}

        create_urls \
            "{input.pos}" \
            pos \
            {output.urls}

        create_urls \
            "{input.neg}" \
            neg \
            {output.urls}

        # Create IGV session
        {SRC}/write_igv_xml.py \
            {output.urls} \
            {output.xml}
        """

 
